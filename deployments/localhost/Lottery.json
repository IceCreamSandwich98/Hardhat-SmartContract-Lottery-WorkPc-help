{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__NotEnoughEthEntered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__NotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__TransferFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numPlayers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "raffleState",
          "type": "uint256"
        }
      ],
      "name": "Raffle__upkeepNotNeeded",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "raffleEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "requestedRaffleWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "winnerPicked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterRaffle",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEnteranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRaffleState",
      "outputs": [
        {
          "internalType": "enum Lottery.RaffleState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequestConfirmation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc26a28f6f4cdcc1366c34d3552157bc77e91f51be668b354b7519ffad14cabd9",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "1203914",
    "logsBloom": "0x
    "blockHash": "0x3041bbca960162588c11e4f6ddf636b87e2d46e508cc3e0500a23f3d21d094e0",
    "transactionHash": "0xc26a28f6f4cdcc1366c34d3552157bc77e91f51be668b354b7519ffad14cabd9",
    "logs": [],
    "blockNumber": 4,
    "cumulativeGasUsed": "1203914",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "10000000000000000",
    "0x79d3d8832d904592c0bf9818b621522c988bb8b0c05cdc3b15aea1b6e8db0c15",
    "1",
    "500000",
    "30"
  ],
  "numDeployments": 1,
  "solcInputHash": "d661586396af1efce588380f1380caad",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotEnoughEthEntered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__TransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raffleState\",\"type\":\"uint256\"}],\"name\":\"Raffle__upkeepNotNeeded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"raffleEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"requestedRaffleWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"winnerPicked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterRaffle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEnteranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaffleState\",\"outputs\":[{\"internalType\":\"enum Lottery.RaffleState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfirmation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Sean Flaherty\",\"details\":\"this implements ChainLink VRf v2 and ChainLink Keepers\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Sample Smart Contract Lottery Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This contract is for creating a untamperable, decentralized lotterty in the form of a smart contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Lottery.sol\":\"Lottery\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\n/** ****************************************************************************\\r\\n * @notice Interface for contracts using VRF randomness\\r\\n * *****************************************************************************\\r\\n * @dev PURPOSE\\r\\n *\\r\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\r\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\r\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\r\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\r\\n * @dev Reggie, he gives back a value which is computed completely\\r\\n * @dev deterministically from the seed and the secret key.\\r\\n *\\r\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\r\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\r\\n * @dev the output is indistinguishable to her from a uniform random sample\\r\\n * @dev from the output space.\\r\\n *\\r\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\r\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\r\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\r\\n * @dev 1. The fulfillment came from the VRFCoordinator\\r\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\r\\n * *****************************************************************************\\r\\n * @dev USAGE\\r\\n *\\r\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\r\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\r\\n * @dev shown:\\r\\n *\\r\\n * @dev   contract VRFConsumer {\\r\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\r\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\r\\n * @dev         <initialization with other arguments goes here>\\r\\n * @dev       }\\r\\n * @dev   }\\r\\n *\\r\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\r\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\r\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\r\\n * @dev subscription management functions).\\r\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\r\\n * @dev callbackGasLimit, numWords),\\r\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\r\\n *\\r\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\r\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\r\\n *\\r\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\r\\n * @dev generated from your requestId and the blockHash of the request.\\r\\n *\\r\\n * @dev If your contract could have concurrent requests open, you can use the\\r\\n * @dev requestId returned from requestRandomWords to track which response is associated\\r\\n * @dev with which randomness request.\\r\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\r\\n * @dev if your contract could have multiple requests in flight simultaneously.\\r\\n *\\r\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\r\\n * @dev differ.\\r\\n *\\r\\n * *****************************************************************************\\r\\n * @dev SECURITY CONSIDERATIONS\\r\\n *\\r\\n * @dev A method with the ability to call your fulfillRandomness method directly\\r\\n * @dev could spoof a VRF response with any random value, so it's critical that\\r\\n * @dev it cannot be directly called by anything other than this base contract\\r\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\r\\n *\\r\\n * @dev For your users to trust that your contract's random behavior is free\\r\\n * @dev from malicious interference, it's best if you can write it so that all\\r\\n * @dev behaviors implied by a VRF response are executed *during* your\\r\\n * @dev fulfillRandomness method. If your contract must store the response (or\\r\\n * @dev anything derived from it) and use it later, you must ensure that any\\r\\n * @dev user-significant behavior which depends on that stored value cannot be\\r\\n * @dev manipulated by a subsequent VRF request.\\r\\n *\\r\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\r\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\r\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\r\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\r\\n * @dev be used to manipulate your contract's user-significant behavior.\\r\\n *\\r\\n * @dev Since the block hash of the block which contains the requestRandomness\\r\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\r\\n * @dev miner could, in principle, fork the blockchain to evict the block\\r\\n * @dev containing the request, forcing the request to be included in a\\r\\n * @dev different block with a different hash, and therefore a different input\\r\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\r\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\r\\n * @dev until it calls responds to a request. It is for this reason that\\r\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\r\\n * @dev responding to the request (however this is not enforced in the contract\\r\\n * @dev and so remains effective only in the case of unmodified oracle software).\\r\\n */\\r\\nabstract contract VRFConsumerBaseV2 {\\r\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\r\\n  address private immutable vrfCoordinator;\\r\\n\\r\\n  /**\\r\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\r\\n   */\\r\\n  constructor(address _vrfCoordinator) {\\r\\n    vrfCoordinator = _vrfCoordinator;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\r\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\r\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\r\\n   * @notice method.\\r\\n   *\\r\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\r\\n   * @dev signature, and will call it once it has verified the proof\\r\\n   * @dev associated with the randomness. (It is triggered via a call to\\r\\n   * @dev rawFulfillRandomness, below.)\\r\\n   *\\r\\n   * @param requestId The Id initially returned by requestRandomness\\r\\n   * @param randomWords the VRF output expanded to the requested number of words\\r\\n   */\\r\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\r\\n\\r\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\r\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\r\\n  // the origin of the call\\r\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\r\\n    if (msg.sender != vrfCoordinator) {\\r\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\r\\n    }\\r\\n    fulfillRandomWords(requestId, randomWords);\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0xa5a63e3281c846ec9c603e7696bf50474bc3b55695c24cec1dfddfde15d7ef0d\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface KeeperCompatibleInterface {\\r\\n  /**\\r\\n   * @notice method that is simulated by the keepers to see if any work actually\\r\\n   * needs to be performed. This method does does not actually need to be\\r\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\r\\n   * @dev To ensure that it is never called, you may want to add the\\r\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\r\\n   * method.\\r\\n   * @param checkData specified in the upkeep registration so it is always the\\r\\n   * same for a registered upkeep. This can easily be broken down into specific\\r\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\r\\n   * same contract and easily differentiated by the contract.\\r\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\r\\n   * performUpkeep or not.\\r\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\r\\n   * upkeep is needed. If you would like to encode data to decode later, try\\r\\n   * `abi.encode`.\\r\\n   */\\r\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\r\\n\\r\\n  /**\\r\\n   * @notice method that is actually executed by the keepers, via the registry.\\r\\n   * The data returned by the checkUpkeep simulation will be passed into\\r\\n   * this method to actually be executed.\\r\\n   * @dev The input to this method should not be trusted, and the caller of the\\r\\n   * method should not even be restricted to any single registry. Anyone should\\r\\n   * be able call it, and the input should be validated, there is no guarantee\\r\\n   * that the data passed in is the performData returned from checkUpkeep. This\\r\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\r\\n   * change while the performUpkeep transaction is waiting for confirmation.\\r\\n   * Always validate the data passed in.\\r\\n   * @param performData is the data which was passed back from the checkData\\r\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\r\\n   * calling `abi.decode`. This data should not be trusted, and should be\\r\\n   * validated against the contract's current state.\\r\\n   */\\r\\n  function performUpkeep(bytes calldata performData) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x3c229f407b872149e89f572136d966f7f1bfa312d77cf2102be73f65740a2fbf\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface VRFCoordinatorV2Interface {\\r\\n  /**\\r\\n   * @notice Get configuration relevant for making requests\\r\\n   * @return minimumRequestConfirmations global min for request confirmations\\r\\n   * @return maxGasLimit global max for request gas limit\\r\\n   * @return s_provingKeyHashes list of registered key hashes\\r\\n   */\\r\\n  function getRequestConfig()\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      uint16,\\r\\n      uint32,\\r\\n      bytes32[] memory\\r\\n    );\\r\\n\\r\\n  /**\\r\\n   * @notice Request a set of random words.\\r\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\r\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\r\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\r\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\r\\n   * with the minimum subscription balance required for the selected keyHash.\\r\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\r\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\r\\n   * for why you may want to request more. The acceptable range is\\r\\n   * [minimumRequestBlockConfirmations, 200].\\r\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\r\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\r\\n   * may be slightly less than this amount because of gas used calling the function\\r\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\r\\n   * to have inside fulfillRandomWords. The acceptable range is\\r\\n   * [0, maxGasLimit]\\r\\n   * @param numWords - The number of uint256 random values you'd like to receive\\r\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\r\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\r\\n   * @return requestId - A unique identifier of the request. Can be used to match\\r\\n   * a request to a response in fulfillRandomWords.\\r\\n   */\\r\\n  function requestRandomWords(\\r\\n    bytes32 keyHash,\\r\\n    uint64 subId,\\r\\n    uint16 minimumRequestConfirmations,\\r\\n    uint32 callbackGasLimit,\\r\\n    uint32 numWords\\r\\n  ) external returns (uint256 requestId);\\r\\n\\r\\n  /**\\r\\n   * @notice Create a VRF subscription.\\r\\n   * @return subId - A unique subscription id.\\r\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\r\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\r\\n   * @dev  LINKTOKEN.transferAndCall(\\r\\n   * @dev    address(COORDINATOR),\\r\\n   * @dev    amount,\\r\\n   * @dev    abi.encode(subId));\\r\\n   */\\r\\n  function createSubscription() external returns (uint64 subId);\\r\\n\\r\\n  /**\\r\\n   * @notice Get a VRF subscription.\\r\\n   * @param subId - ID of the subscription\\r\\n   * @return balance - LINK balance of the subscription in juels.\\r\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\r\\n   * @return owner - owner of the subscription.\\r\\n   * @return consumers - list of consumer address which are able to use this subscription.\\r\\n   */\\r\\n  function getSubscription(uint64 subId)\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      uint96 balance,\\r\\n      uint64 reqCount,\\r\\n      address owner,\\r\\n      address[] memory consumers\\r\\n    );\\r\\n\\r\\n  /**\\r\\n   * @notice Request subscription owner transfer.\\r\\n   * @param subId - ID of the subscription\\r\\n   * @param newOwner - proposed new owner of the subscription\\r\\n   */\\r\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Request subscription owner transfer.\\r\\n   * @param subId - ID of the subscription\\r\\n   * @dev will revert if original owner of subId has\\r\\n   * not requested that msg.sender become the new owner.\\r\\n   */\\r\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Add a consumer to a VRF subscription.\\r\\n   * @param subId - ID of the subscription\\r\\n   * @param consumer - New consumer which can use the subscription\\r\\n   */\\r\\n  function addConsumer(uint64 subId, address consumer) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Remove a consumer from a VRF subscription.\\r\\n   * @param subId - ID of the subscription\\r\\n   * @param consumer - Consumer to remove from the subscription\\r\\n   */\\r\\n  function removeConsumer(uint64 subId, address consumer) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Cancel a subscription\\r\\n   * @param subId - ID of the subscription\\r\\n   * @param to - Where to send the remaining LINK to\\r\\n   */\\r\\n  function cancelSubscription(uint64 subId, address to) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x8f6c27a725f91902c316290fb0790d6ced336ad3333d8aef531bf68d6ed2d841\",\"license\":\"MIT\"},\"contracts/Lottery.sol\":{\"content\":\"//smart contract lottery\\r\\n//front end, eth_requrest and allow user to conenct wallet\\r\\n//deposit function, minimum .1 ethereum to enter lottery\\r\\n//for every .1 eth deposited, add the msg.sender address to a array to hold all contestents\\r\\n//use random number from orical to pick random index in contestent array\\r\\n// send winning eth to address\\r\\n\\r\\n//want the lottery to run every x hours automatically.\\r\\n\\r\\n//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\";\\r\\n//errors use less gas than doing require(~~~~)}\\r\\nerror Raffle__NotEnoughEthEntered();\\r\\nerror Raffle__TransferFailed();\\r\\nerror Raffle__NotOpen();\\r\\nerror Raffle__upkeepNotNeeded(\\r\\n    uint256 currentBalance,\\r\\n    uint256 numPlayers,\\r\\n    uint256 raffleState\\r\\n);\\r\\n\\r\\n/**\\r\\n * @title Sample Smart Contract Lottery Contract\\r\\n * @author Sean Flaherty\\r\\n * @notice This contract is for creating a untamperable, decentralized lotterty in the form of a smart contract\\r\\n * @dev this implements ChainLink VRf v2 and ChainLink Keepers\\r\\n */\\r\\n\\r\\ncontract Lottery is VRFConsumerBaseV2, KeeperCompatibleInterface {\\r\\n    /* Type Declarations */\\r\\n\\r\\n    enum RaffleState {\\r\\n        OPEN,\\r\\n        CALCULATING\\r\\n    } //secretly calulating new uint 256 where \\\"0\\\" == OPEN, \\\"1\\\" == CALCULATING;\\r\\n\\r\\n    /* State Vars */\\r\\n    uint256 private immutable i_entranceFee;\\r\\n    address payable[] private s_contestentArray;\\r\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\r\\n    bytes32 private immutable i_gasLane;\\r\\n    uint64 private immutable i_subscriptionId;\\r\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\r\\n    uint32 private immutable i_callbackGasLimit;\\r\\n    uint32 private constant NUMBER_WORDS = 1;\\r\\n\\r\\n    /* Lottery Vars */\\r\\n    address private s_recentWinner;\\r\\n    RaffleState private s_raffleState;\\r\\n    uint256 private s_lastTimeStamp;\\r\\n    uint256 private immutable i_interval;\\r\\n\\r\\n    /* Evnents */\\r\\n\\r\\n    //addition of new player in array\\r\\n    event raffleEnter(address indexed player);\\r\\n    //ping chainlink to get random num\\r\\n    event requestedRaffleWinner(uint256 indexed requestId);\\r\\n    //ping front end to show winner\\r\\n    event winnerPicked(address indexed winner);\\r\\n\\r\\n    /* constructor */\\r\\n    constructor(\\r\\n        address vrfCoordinatorV2, //contract, cant be accessed in non-test net setting, make a mock for this\\r\\n        uint256 entranceFee,\\r\\n        bytes32 gasLane,\\r\\n        uint64 subscriptionId,\\r\\n        uint32 callbackGasLimit,\\r\\n        uint256 interval\\r\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\r\\n        i_entranceFee = entranceFee;\\r\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\r\\n        i_gasLane = gasLane;\\r\\n        i_subscriptionId = subscriptionId;\\r\\n        i_callbackGasLimit = callbackGasLimit;\\r\\n        s_raffleState = RaffleState.OPEN;\\r\\n        s_lastTimeStamp = block.timestamp;\\r\\n        i_interval = interval;\\r\\n    }\\r\\n\\r\\n    function enterRaffle() public payable {\\r\\n        //instead of doing require(msg.sender > i_enterance fee, create custom error to save much more gas)\\r\\n        if (msg.value < i_entranceFee) {\\r\\n            revert Raffle__NotEnoughEthEntered();\\r\\n        }\\r\\n        if (s_raffleState != RaffleState.OPEN) {\\r\\n            revert Raffle__NotOpen();\\r\\n        }\\r\\n        s_contestentArray.push(payable(msg.sender));\\r\\n        emit raffleEnter(msg.sender);\\r\\n        //whenever we update a array or mapping, we want to emit an \\\"event\\\" to our frontend\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev This is the func that the chainlink keeper nodes call\\r\\n     * they look for the 'upkeepneeded' to return true.\\r\\n     * to be true....\\r\\n     * 1.)our time interval should pass.\\r\\n     * 2.) lottery must have min 1 player and have some eth\\r\\n     * 3.) our subscription is funded with link\\r\\n     * 4.) lottery should be in a \\\"open\\\" state\\r\\n     * check to see if its time to pick random number. to update recent winner\\r\\n     */\\r\\n    function checkUpkeep(\\r\\n        bytes memory /*checkData */\\r\\n    )\\r\\n        public\\r\\n        override\\r\\n        returns (bool upkeepNeeded, bytes memory /*perform data */)\\r\\n    {\\r\\n        bool isOpen = (RaffleState.OPEN == s_raffleState);\\r\\n        bool playerArray = (s_contestentArray.length >= 1);\\r\\n        bool timeStamp = ((block.timestamp - s_lastTimeStamp) > i_interval);\\r\\n        bool hasBalance = address(this).balance > 0;\\r\\n        upkeepNeeded = (isOpen && playerArray && hasBalance && timeStamp);\\r\\n    }\\r\\n\\r\\n    function performUpkeep(bytes calldata /*perform data */) external override {\\r\\n        //request random num fro mcahinlink\\r\\n        //do something with random num\\r\\n        // 2 transaction process\\r\\n        (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\");\\r\\n        if (!upkeepNeeded) {\\r\\n            revert Raffle__upkeepNotNeeded(\\r\\n                address(this).balance,\\r\\n                s_contestentArray.length,\\r\\n                uint256(s_raffleState)\\r\\n            );\\r\\n        }\\r\\n        s_raffleState = RaffleState.CALCULATING;\\r\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\r\\n            i_gasLane, //gas lane\\r\\n            i_subscriptionId,\\r\\n            REQUEST_CONFIRMATIONS,\\r\\n            i_callbackGasLimit,\\r\\n            NUMBER_WORDS\\r\\n        );\\r\\n        emit requestedRaffleWinner(requestId);\\r\\n    }\\r\\n\\r\\n    function fulfillRandomWords(\\r\\n        uint256,\\r\\n        uint256[] memory randomWords\\r\\n    ) internal override {\\r\\n        uint256 indexOfWinner = randomWords[0] % s_contestentArray.length;\\r\\n        address payable recentWinner = s_contestentArray[indexOfWinner];\\r\\n        s_recentWinner = recentWinner;\\r\\n        s_raffleState = RaffleState.OPEN;\\r\\n        s_contestentArray = new address payable[](0);\\r\\n        s_lastTimeStamp = block.timestamp;\\r\\n        (bool success, ) = recentWinner.call{value: address(this).balance}(\\\"\\\");\\r\\n        if (!success) {\\r\\n            revert Raffle__TransferFailed();\\r\\n        }\\r\\n        emit winnerPicked(recentWinner);\\r\\n    }\\r\\n\\r\\n    /* Get Functions */\\r\\n    function getEnteranceFee() public view returns (uint256) {\\r\\n        return i_entranceFee;\\r\\n    }\\r\\n\\r\\n    function getPlayer(uint256 index) public view returns (address) {\\r\\n        return s_contestentArray[index];\\r\\n    }\\r\\n\\r\\n    function getRaffleState() public view returns (RaffleState) {\\r\\n        return s_raffleState;\\r\\n    }\\r\\n\\r\\n    function getNumWords() public pure returns (uint256) {\\r\\n        return NUMBER_WORDS;\\r\\n    }\\r\\n\\r\\n    function getRecentWinner() public view returns (address) {\\r\\n        return s_recentWinner;\\r\\n    }\\r\\n\\r\\n    function getNumberOfPlayers() public view returns (uint256) {\\r\\n        return s_contestentArray.length;\\r\\n    }\\r\\n\\r\\n    function getLatestTimeStamp() public view returns (uint256) {\\r\\n        return s_lastTimeStamp;\\r\\n    }\\r\\n\\r\\n    function getRequestConfirmation() public pure returns (uint256) {\\r\\n        return REQUEST_CONFIRMATIONS;\\r\\n    }\\r\\n\\r\\n    function getInterval() public view returns (uint256) {\\r\\n        return i_interval;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x02df6109eac905b9495015c86314d736ec3830a06e744e2e959bc1f02bbee790\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b506040516200180438038062001804833981810160405281019062000038919062000294565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508460a081815250508573ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff16815250508360e081815250508267ffffffffffffffff166101008167ffffffffffffffff16815250508163ffffffff166101208163ffffffff16815250506000600160146101000a81548160ff021916908360018111156200010d576200010c62000330565b5b0217905550426002819055508061014081815250505050505050506200035f565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001608262000133565b9050919050565b620001728162000153565b81146200017e57600080fd5b50565b600081519050620001928162000167565b92915050565b6000819050919050565b620001ad8162000198565b8114620001b957600080fd5b50565b600081519050620001cd81620001a2565b92915050565b6000819050919050565b620001e881620001d3565b8114620001f457600080fd5b50565b6000815190506200020881620001dd565b92915050565b600067ffffffffffffffff82169050919050565b6200022d816200020e565b81146200023957600080fd5b50565b6000815190506200024d8162000222565b92915050565b600063ffffffff82169050919050565b6200026e8162000253565b81146200027a57600080fd5b50565b6000815190506200028e8162000263565b92915050565b60008060008060008060c08789031215620002b457620002b36200012e565b5b6000620002c489828a0162000181565b9650506020620002d789828a01620001bc565b9550506040620002ea89828a01620001f7565b9450506060620002fd89828a016200023c565b93505060806200031089828a016200027d565b92505060a06200032389828a01620001bc565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160a05160c05160e051610100516101205161014051611435620003cf600039600081816107e8015261084a0152600061067d0152600061065a01526000610639015260006105fd0152600081816103cf015261076401526000818161030f015261036301526114356000f3fe6080604052600436106100c25760003560e01c8063535bf50f1161007f57806391ad27b41161005957806391ad27b414610238578063ca6a9ef814610263578063e55ae4e81461028e578063fd6673f5146102cb576100c2565b8063535bf50f146101a457806353a2c19a146101cf5780636e04ff0d146101fa576100c2565b8063115cbaf5146100c75780631fe543e3146100f25780632cfcc5391461011b578063320229eb146101255780634585e33b14610150578063473f1ddc14610179575b600080fd5b3480156100d357600080fd5b506100dc6102f6565b6040516100e99190610c1d565b60405180910390f35b3480156100fe57600080fd5b5061011960048036038101906101149190610ddb565b61030d565b005b6101236103cd565b005b34801561013157600080fd5b5061013a61053c565b6040516101479190610e46565b60405180910390f35b34801561015c57600080fd5b5061017760048036038101906101729190610ebc565b610546565b005b34801561018557600080fd5b5061018e610736565b60405161019b9190610f4a565b60405180910390f35b3480156101b057600080fd5b506101b9610760565b6040516101c69190610e46565b60405180910390f35b3480156101db57600080fd5b506101e4610788565b6040516101f19190610e46565b60405180910390f35b34801561020657600080fd5b50610221600480360381019061021c919061101a565b610797565b60405161022f9291906110fd565b60405180910390f35b34801561024457600080fd5b5061024d610846565b60405161025a9190610e46565b60405180910390f35b34801561026f57600080fd5b5061027861086e565b6040516102859190610e46565b60405180910390f35b34801561029a57600080fd5b506102b560048036038101906102b0919061112d565b61087b565b6040516102c29190610f4a565b60405180910390f35b3480156102d757600080fd5b506102e06108c2565b6040516102ed9190610e46565b60405180910390f35b6000600160149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103bf57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103b692919061115a565b60405180910390fd5b6103c982826108ce565b5050565b7f0000000000000000000000000000000000000000000000000000000000000000341015610427576040517f066d781f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561043b5761043a610ba6565b5b600160149054906101000a900460ff16600181111561045d5761045c610ba6565b5b14610494576040517f1425571c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f742d070bf0f3edace132a9da8ba725e8cf99c478869cee7f673ed6085e2f8e6460405160405180910390a2565b6000600254905090565b600061056060405180602001604052806000815250610797565b509050806105cf5747600080549050600160149054906101000a900460ff16600181111561059157610590610ba6565b5b6040517f837325cd0000000000000000000000000000000000000000000000000000000081526004016105c693929190611183565b60405180910390fd5b60018060146101000a81548160ff021916908360018111156105f4576105f3610ba6565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016106be959493929190611232565b6020604051808303816000875af11580156106dd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610701919061129a565b9050807fe0abfa81226f1e2ce09ba287cbb4c241e89b2b891a389274bb7d9c46e344daf060405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600163ffffffff16905090565b600060606000600160149054906101000a900460ff1660018111156107bf576107be610ba6565b5b600060018111156107d3576107d2610ba6565b5b149050600060016000805490501015905060007f00000000000000000000000000000000000000000000000000000000000000006002544261081591906112f6565b119050600080471190508380156108295750825b80156108325750805b801561083b5750815b955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600361ffff16905090565b60008082815481106108905761088f61132a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050905090565b60008080549050826000815181106108e9576108e861132a565b5b60200260200101516108fb9190611388565b905060008082815481106109125761091161132a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160146101000a81548160ff021916908360018111156109a6576109a5610ba6565b5b0217905550600067ffffffffffffffff8111156109c6576109c5610c98565b5b6040519080825280602002602001820160405280156109f45781602001602082028036833780820191505090505b5060009080519060200190610a0a929190610aff565b504260028190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610a38906113ea565b60006040518083038185875af1925050503d8060008114610a75576040519150601f19603f3d011682016040523d82523d6000602084013e610a7a565b606091505b5050905080610ab5576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f794919b0f484b8e90b1b817ac7f880f846fbd8a9813dee2a378e820db094e3d160405160405180910390a25050505050565b828054828255906000526020600020908101928215610b78579160200282015b82811115610b775782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b1f565b5b509050610b859190610b89565b5090565b5b80821115610ba2576000816000905550600101610b8a565b5090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610be657610be5610ba6565b5b50565b6000819050610bf782610bd5565b919050565b6000610c0782610be9565b9050919050565b610c1781610bfc565b82525050565b6000602082019050610c326000830184610c0e565b92915050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610c5f81610c4c565b8114610c6a57600080fd5b50565b600081359050610c7c81610c56565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610cd082610c87565b810181811067ffffffffffffffff82111715610cef57610cee610c98565b5b80604052505050565b6000610d02610c38565b9050610d0e8282610cc7565b919050565b600067ffffffffffffffff821115610d2e57610d2d610c98565b5b602082029050602081019050919050565b600080fd5b6000610d57610d5284610d13565b610cf8565b90508083825260208201905060208402830185811115610d7a57610d79610d3f565b5b835b81811015610da35780610d8f8882610c6d565b845260208401935050602081019050610d7c565b5050509392505050565b600082601f830112610dc257610dc1610c82565b5b8135610dd2848260208601610d44565b91505092915050565b60008060408385031215610df257610df1610c42565b5b6000610e0085828601610c6d565b925050602083013567ffffffffffffffff811115610e2157610e20610c47565b5b610e2d85828601610dad565b9150509250929050565b610e4081610c4c565b82525050565b6000602082019050610e5b6000830184610e37565b92915050565b600080fd5b60008083601f840112610e7c57610e7b610c82565b5b8235905067ffffffffffffffff811115610e9957610e98610e61565b5b602083019150836001820283011115610eb557610eb4610d3f565b5b9250929050565b60008060208385031215610ed357610ed2610c42565b5b600083013567ffffffffffffffff811115610ef157610ef0610c47565b5b610efd85828601610e66565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610f3482610f09565b9050919050565b610f4481610f29565b82525050565b6000602082019050610f5f6000830184610f3b565b92915050565b600080fd5b600067ffffffffffffffff821115610f8557610f84610c98565b5b610f8e82610c87565b9050602081019050919050565b82818337600083830152505050565b6000610fbd610fb884610f6a565b610cf8565b905082815260208101848484011115610fd957610fd8610f65565b5b610fe4848285610f9b565b509392505050565b600082601f83011261100157611000610c82565b5b8135611011848260208601610faa565b91505092915050565b6000602082840312156110305761102f610c42565b5b600082013567ffffffffffffffff81111561104e5761104d610c47565b5b61105a84828501610fec565b91505092915050565b60008115159050919050565b61107881611063565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156110b857808201518184015260208101905061109d565b60008484015250505050565b60006110cf8261107e565b6110d98185611089565b93506110e981856020860161109a565b6110f281610c87565b840191505092915050565b6000604082019050611112600083018561106f565b818103602083015261112481846110c4565b90509392505050565b60006020828403121561114357611142610c42565b5b600061115184828501610c6d565b91505092915050565b600060408201905061116f6000830185610f3b565b61117c6020830184610f3b565b9392505050565b60006060820190506111986000830186610e37565b6111a56020830185610e37565b6111b26040830184610e37565b949350505050565b6000819050919050565b6111cd816111ba565b82525050565b600067ffffffffffffffff82169050919050565b6111f0816111d3565b82525050565b600061ffff82169050919050565b61120d816111f6565b82525050565b600063ffffffff82169050919050565b61122c81611213565b82525050565b600060a08201905061124760008301886111c4565b61125460208301876111e7565b6112616040830186611204565b61126e6060830185611223565b61127b6080830184611223565b9695505050505050565b60008151905061129481610c56565b92915050565b6000602082840312156112b0576112af610c42565b5b60006112be84828501611285565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061130182610c4c565b915061130c83610c4c565b9250828203905081811115611324576113236112c7565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061139382610c4c565b915061139e83610c4c565b9250826113ae576113ad611359565b5b828206905092915050565b600081905092915050565b50565b60006113d46000836113b9565b91506113df826113c4565b600082019050919050565b60006113f5826113c7565b915081905091905056fea264697066735822122011beba00d22d771131a932566b0e688bf4dea9f24964046eb223bebc26f5324364736f6c63430008110033",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Sean Flaherty",
    "details": "this implements ChainLink VRf v2 and ChainLink Keepers",
    "kind": "dev",
    "methods": {},
    "title": "Sample Smart Contract Lottery Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "This contract is for creating a untamperable, decentralized lotterty in the form of a smart contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 197,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_contestentArray",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 214,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_recentWinner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 217,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_raffleState",
        "offset": 20,
        "slot": "1",
        "type": "t_enum(RaffleState)192"
      },
      {
        "astId": 219,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(RaffleState)192": {
        "encoding": "inplace",
        "label": "enum Lottery.RaffleState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}